# Proiectarea Algoritmilor - Tema 2
### Student: Mihailescu Eduard-Florin 322CB

## Overview
Acest proiect are scop rezolvarea temei II propusa in cadrul cursului de Proiectarea
Algoritmilor de la Facultatea de Automatica si Calculatoare Bucuresti.
Stiu ca nu este recomandata folosirea variabilelor globale, insa in cazul rezolvarii
acestor probleme de algoritmica, acestea usureaza un pic viata.

---
### I - Curatare
Imediat dupa ce am vazut dimensiunile |R| si |S| am stiut ca este vorba de o
problema de backtracking, dificultatea acestei probleme fiind data in mod
special de partea de implementarea, aceasta fiind destul de laborioasa
si dispusa la erori.
Planul de "atac" al problemei este urmatorul:
-   Incerc orice configuratie posibila de roboti si zone care necesita curatare
-   Pentru fiecare pas din backtracking (configuratie posibila) calculez
timpul maxim pentru ca un robot sa isi termine treaba (sa parcurga toate zone
de curatat asignate lui)
-   Raspunsul final va fi minimul dintre acesti timpi maximi

Inafara de backtracking, a trebuit sa mai fac o preprocesare pentru matricea min_distances
care imi spune pentru oriecare doua puncte de "interes" (robot sau zona de curatat) de pe harta
care este distanta minima dintre ele. Acest lucru a fost realizat cu algoritmul lui Lee
pornind din fiecare punct in parte. Complexitatea pentru acesta preprocesare este
O(n * m * (|R|+|S|))

La o configuratie posibila din backtracking (asociere intre roboti si zone), timpul minim
al unui robot de a acoperi toate zonele este calculat in mod greedy, plecand din patratica
robotului si alegand de fiecare data cel mai apropiat punct pentru a face deplasarea.
Aici intra in ajutor matricea de distante preprocesata.

Backtracking este facut pe biti deoarece mi se pare cea mai usoara varianta de a crea submultimi.
Modul de functionare:
-   Codific configuratia posibila in felul urmator -> |R| * |S| biti care imi descriu
daca asignez o zona unui robot (1/0).
-   Asadar, daca de exemplu am doi roboti si doua zone de curatat, primii doi biti vor
reprezenta zonele primului robot si urmatoarele doua, zonele celuilalt robot.

1001 -> O astfel de codificare ne spune ca robotul unu are asignata prima zona, si robotul doi
are asignata a doua zona.
1100 -> O astfel de codificare ne spune ca robotul unu are asignate ambele zone, si robotul doi
nu are niciuna.

Pentru ca o configuratie sa fie valida si calculata, trebuie ca toate zonele sa fie acoperite
si acestea sa nu se suprapuna. (operatii pe biti ^ | &)

Complexitatea backtrackingului este urmatoarea: O(2^(|R|*|S|) * |R| *|S|)

---
### II - Fortificatii
Problema m-a dus imediat cu gandul la probleme de distanta in grafuri si de asemenea,
vazand k-ul foarte mare mi-am dat seama ca va trebui sa aplic ceva greedy si matematic.
Astfel, dupa mai multe exemple pe foaie, mi-am dat seama ca ma intereseaza timpii
cei mai scurti catre asezarile barbarilor deoarece numai pe acolo ar "merge" pentru a 
ajunge la capitala. De asemenea pot sa tratez aceste drumuri, ca un tot unitar, atunci
cand vreau sa adaug fortifcatii (adaug 1 pentru tot drumul, nu numai pt muchia dintre oras
normal si oras barbar). Inca o observatie importanta pe care am facut-o inainte de a rezolva
este aceea ca daca un oras barbar poate fi acesat doar prin intermediul altui oras barbar
atunci acel oras nu ma intereseaza si nu vreau sa calculez drumul pana la el.

Astfel, solutia mea pleaca de la precalcularea tuturor rutelor de drum minim catre orase barbare
(mai exact timpii). Acest lucru il realizez cu algoritmul lui Dijkstra (pe care l-am
scris cu un priority queue si cu o structura NodeDist caruia ii modific operatorul "<"
pentru a face din standardul max heap, un min heap), si de fiecare data cand intampin
o asezare barbara (verificarea o fac cu un unordered set, deci retrieval time se face in aprox O(1)) atunci adaug la un vector timpul pana la el. Complexitatea pentru Dijkstra este de O(|E| + |V| * log |V|).

Avand acum vectorul de distante (timpi), il sortez si aplic o metoda greedy de distribuire a celor k
fortificatii. Doresc sa maresc de fiecare data timpul minim pana la capitala, asa ca incerc
sa aduc toate drumurile la timpul maxim, incepand cu cel mai mic. De exemplu daca am drumuri cu timpi
1 2 3 atunci procesul ar arata in felul urmator =>
1 2 3 => 2 2 3 => 3 3 3 (asta in cazul in care k-ul este suficient de mare)
Acum daca mai am fortificatii la indemana, trebuie sa adaug la toate cate o fortificatie pentru a mari
timpul minim => de ex mai am 4 fortificatii atunci fac (3 + 1) (3 + 1) (3 + 1) => 4 4 4 
Si acum chiar daca mai am o fortificatie, nu mai pot sa maresc timpul minim. Astfel rezultatul este
dist_max + (k / nr) unde nr e numarul de drumuri.

Calcularea rezultatului se face in timp liniar O(n), asadar, complexitatea totala a programului este
data de algoritmul Dijkstra.

---
### III - Beamdrone
Enuntul si poza din exemplu m-au dus din prima cu gandul la algoritmul lui Lee insa un pic modificat.
Modificarea consta in faptul ca la fiecare celula curenta pe care o procesez, mai intai parcurg"
cat "pot" toti vecinii din cele 4 directii cardinale si setez drumul minim pana acolo.
Spre deosebire de algoritmul lui Lee normal, in aceasta varianta pot aparea over-lapuri (gasim
un drum mai bun mai tarziu un procesare). Astfel, tinand cont de acest aspect, daca pentru celula
pe care sunt momentan am gasit un drum mai rapid, o reintroduc in coada si o procesez din nou.

Insa, o precizare importanta care optimeazeaza acest algoritm si il face sa se incadreze in timpul 
alocat este ca, pentru fiecare celula retin in structura Node directia din care aceasta
a fost adaugata in coada pentru a nu mai procesa in mod reduntat aceea linie sau coloana.

Desi in teorie, algortitmul are o complexitate worst-case de O(n*m * max(n,m)), in practica
complexitatea este amortizata si se comporta mult mai bine.

